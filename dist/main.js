(()=>{"use strict";function e(o,t,n,s,h){let u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(t[0]===o[0]&&t[1]===o[1])return h.push([t[0],t[1]]),console.log("ur here already"),h;h.pop();const l=7*o[0]+o[0]+o[1];for(let e=0;e<n[l].head.length;e++)s.push(n[l].head[e]);return h.push(s[u]),u+=1,h.push(e(s.shift(),t,n,s,h,u)),h}!function(){let o=[];const t=[0,2],n=[];n.push(t),n.push(0),o=function(e){const o=[void 0];for(let t=0;t<=7;t++)for(let n=0;n<=7;n++){o[7*t+t+n]={head:[]};for(let s=0;s<=7;s++)t+e[s][0]>=0&&t+e[s][0]<=7&&n+e[s][1]>=0&&n+e[s][1]<=7&&o[7*t+t+n].head.push([t+e[s][0],n+e[s][1]])}return o}([[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]]),console.log(o),n.push(t),console.log(e(t,[5,6],o,[],n))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBNEJBLFNBQVNBLEVBQWFDLEVBQU9DLEVBQUtDLEVBQU9DLEVBQU9DLEdBQWdCLElBQVhDLEVBQUtDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDM0QsR0FBSUwsRUFBSSxLQUFPRCxFQUFNLElBQU1DLEVBQUksS0FBT0QsRUFBTSxHQUcxQyxPQUZBSSxFQUFJSyxLQUFLLENBQUNSLEVBQUksR0FBSUEsRUFBSSxLQUN0QlMsUUFBUUMsSUFBSSxtQkFDTFAsRUFHVEEsRUFBSVEsTUFFSixNQUFNQyxFQUFlLEVBQVhiLEVBQU0sR0FBU0EsRUFBTSxHQUFLQSxFQUFNLEdBRTFDLElBQUssSUFBSWMsRUFBSSxFQUFHQSxFQUFJWixFQUFNVyxHQUFHRSxLQUFLUixPQUFRTyxJQUN4Q1gsRUFBTU0sS0FBS1AsRUFBTVcsR0FBR0UsS0FBS0QsSUFXM0IsT0FSQVYsRUFBSUssS0FBS04sRUFBTUUsSUFHZkEsR0FBUyxFQUdURCxFQUFJSyxLQUFLVixFQUFhSSxFQUFNYSxRQUFTZixFQUFLQyxFQUFPQyxFQUFPQyxFQUFLQyxJQUV0REQsQ0FDVCxFQUVBLFdBQ0UsSUFBSUYsRUFBUSxHQUNaLE1BV01GLEVBQVEsQ0FBQyxFQUFHLEdBR1pJLEVBQU0sR0FHWkEsRUFBSUssS0FBS1QsR0FDVEksRUFBSUssS0FBSyxHQUVUUCxFQXhFRixTQUF1QmUsR0FDckIsTUFBTWYsRUFBUSxNQUFDTSxHQUVmLElBQUssSUFBSUssRUFBSSxFQUFHQSxHQUFLLEVBQUdBLElBQ3RCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxHQUFLLEVBQUdBLElBQUssQ0FDM0JaLEVBQVUsRUFBSlcsRUFBUUEsRUFBSUMsR0NQZixDQUFFQyxLQURJLElEU1QsSUFBSyxJQUFJRyxFQUFJLEVBQUdBLEdBQUssRUFBR0EsSUFFcEJMLEVBQUlJLEVBQWNDLEdBQUcsSUFBTSxHQUMzQkwsRUFBSUksRUFBY0MsR0FBRyxJQUFNLEdBQzNCSixFQUFJRyxFQUFjQyxHQUFHLElBQU0sR0FDM0JKLEVBQUlHLEVBQWNDLEdBQUcsSUFBTSxHQUUzQmhCLEVBQVUsRUFBSlcsRUFBUUEsRUFBSUMsR0FBR0MsS0FBS04sS0FBSyxDQUM3QkksRUFBSUksRUFBY0MsR0FBRyxHQUNyQkosRUFBSUcsRUFBY0MsR0FBRyxJQUk3QixDQUVGLE9BQU9oQixDQUNULENBa0RVaUIsQ0FwQmMsQ0FDcEIsQ0FBQyxFQUFHLEdBQ0osQ0FBQyxHQUFJLEdBQ0wsRUFBRSxFQUFHLEdBQ0wsRUFBRSxHQUFJLEdBQ04sQ0FBQyxFQUFHLEdBQ0osQ0FBQyxHQUFJLEdBQ0wsRUFBRSxFQUFHLEdBQ0wsRUFBRSxHQUFJLEtBYVJULFFBQVFDLElBQUlULEdBRVpFLEVBQUlLLEtBQUtULEdBRVRVLFFBQVFDLElBQUlaLEVBQWFDLEVBYmIsQ0FBQyxFQUFHLEdBYXFCRSxFQVZ2QixHQVVxQ0UsR0FDckQsQ0FFQWdCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJkZXYtdGVtcGxhdGUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViZGV2LXRlbXBsYXRlLy4vc3JjL25vZGUvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cyAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9leHRlbnNpb25zLCBpbXBvcnQvbm8tbmFtZWQtYXMtZGVmYXVsdCwgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHQtbWVtYmVyXG5pbXBvcnQgbm9kZSBmcm9tIFwiLi9ub2RlL25vZGUuanNcIjtcblxuZnVuY3Rpb24gZ3JhcGhDcmVhdGlvbihwb3NzaWJsZU1vdmVzKSB7XG4gIGNvbnN0IGdyYXBoID0gW3VuZGVmaW5lZF07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gNzsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gNzsgaisrKSB7XG4gICAgICBncmFwaFtpICogNyArIGkgKyBqXSA9IG5vZGUoKTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDw9IDc7IGsrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaSArIHBvc3NpYmxlTW92ZXNba11bMF0gPj0gMCAmJlxuICAgICAgICAgIGkgKyBwb3NzaWJsZU1vdmVzW2tdWzBdIDw9IDcgJiZcbiAgICAgICAgICBqICsgcG9zc2libGVNb3Zlc1trXVsxXSA+PSAwICYmXG4gICAgICAgICAgaiArIHBvc3NpYmxlTW92ZXNba11bMV0gPD0gN1xuICAgICAgICApIHtcbiAgICAgICAgICBncmFwaFtpICogNyArIGkgKyBqXS5oZWFkLnB1c2goW1xuICAgICAgICAgICAgaSArIHBvc3NpYmxlTW92ZXNba11bMF0sXG4gICAgICAgICAgICBqICsgcG9zc2libGVNb3Zlc1trXVsxXSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaFJlc3VsdChzdGFydCwgZW5kLCBncmFwaCwgcXVldWUsIHJlcywgY291bnQgPSAwKSB7XG4gIGlmIChlbmRbMF0gPT09IHN0YXJ0WzBdICYmIGVuZFsxXSA9PT0gc3RhcnRbMV0pIHtcbiAgICByZXMucHVzaChbZW5kWzBdLCBlbmRbMV1dKTtcbiAgICBjb25zb2xlLmxvZyhcInVyIGhlcmUgYWxyZWFkeVwiKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmVzLnBvcCgpO1xuXG4gIGNvbnN0IGkgPSBzdGFydFswXSAqIDcgKyBzdGFydFswXSArIHN0YXJ0WzFdO1xuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgZ3JhcGhbaV0uaGVhZC5sZW5ndGg7IGorKykge1xuICAgIHF1ZXVlLnB1c2goZ3JhcGhbaV0uaGVhZFtqXSk7XG4gIH1cblxuICByZXMucHVzaChxdWV1ZVtjb3VudF0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb3VudCArPSAxO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICByZXMucHVzaChzZWFyY2hSZXN1bHQocXVldWUuc2hpZnQoKSwgZW5kLCBncmFwaCwgcXVldWUsIHJlcywgY291bnQpKTtcblxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtYWluKCkge1xuICBsZXQgZ3JhcGggPSBbXTtcbiAgY29uc3QgcG9zc2libGVNb3ZlcyA9IFtcbiAgICBbMiwgMV0sXG4gICAgWzIsIC0xXSxcbiAgICBbLTIsIDFdLFxuICAgIFstMiwgLTFdLFxuICAgIFsxLCAyXSxcbiAgICBbMSwgLTJdLFxuICAgIFstMSwgMl0sXG4gICAgWy0xLCAtMl0sXG4gIF07XG5cbiAgY29uc3Qgc3RhcnQgPSBbMCwgMl07XG4gIGNvbnN0IGVuZCA9IFs1LCA2XTtcblxuICBjb25zdCByZXMgPSBbXTtcbiAgY29uc3QgcXVldWUgPSBbXTtcblxuICByZXMucHVzaChzdGFydCk7XG4gIHJlcy5wdXNoKDApO1xuXG4gIGdyYXBoID0gZ3JhcGhDcmVhdGlvbihwb3NzaWJsZU1vdmVzKTtcbiAgY29uc29sZS5sb2coZ3JhcGgpO1xuXG4gIHJlcy5wdXNoKHN0YXJ0KTtcblxuICBjb25zb2xlLmxvZyhzZWFyY2hSZXN1bHQoc3RhcnQsIGVuZCwgZ3JhcGgsIHF1ZXVlLCByZXMpKTtcbn1cblxubWFpbigpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9kZSgpIHtcbiAgY29uc3QgaGVhZCA9IFtdO1xuICByZXR1cm4geyBoZWFkIH07XG59XG4iXSwibmFtZXMiOlsic2VhcmNoUmVzdWx0Iiwic3RhcnQiLCJlbmQiLCJncmFwaCIsInF1ZXVlIiwicmVzIiwiY291bnQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsInBvcCIsImkiLCJqIiwiaGVhZCIsInNoaWZ0IiwicG9zc2libGVNb3ZlcyIsImsiLCJncmFwaENyZWF0aW9uIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=